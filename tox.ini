
# Core tox configuration
[tox]

# A list of environments that will be run by default when running tox without specifying any environment
envlist =
    py311
    py312
    py313
    coverage
    pylint
    pycodestyle
    pydoclint
    mypy
    docs

# Base configuration for test environments that tox will fallback to for missing values; this avoids having to repeat the same configuration for the
# unit test environments py311, py312, and py313 over and over again
[testenv]
uv_python_preference = only-managed
dependency_groups = testing
setenv =
    COVERAGE_FILE = tests/unit/coverage/.coverage.{envname}
commands =
    python -m pytest \
        --config-file "tests/unit/.pytest.ini" \
        --cov zennit \
        --cov-config "tests/unit/.coveragerc" \
        --cov-append \
        {posargs:tests/unit}

# A test environment that combines the coverage data from all runs of the unit tests with the different Python versions and generates a single report
[testenv:coverage]
setenv =
    COVERAGE_FILE = tests/unit/coverage/.coverage
depends =
    py311
    py312
    py313
commands =
    coverage combine \
        --rcfile "tests/unit/.coveragerc"
    coverage report \
        --rcfile "tests/unit/.coveragerc" \
        --show-missing
    coverage html \
        --rcfile "tests/unit/.coveragerc" \
        --directory "tests/unit/coverage/report"

# A test environment that will build the documentation using Sphinx
[testenv:docs]
base_python = py313
dependency_groups = docs
commands =
    sphinx-build \
        --color \
        --fail-on-warning \
        --fresh-env \
        --keep-going \
        --doctree-dir "docs/doctree" \
        --builder html \
        "docs/source" \
        "docs/build" \
        {posargs}

# A test environment that will run the PyLint linter on the CoRelAy package, the unit tests, the Sphinx configuration file, and the examples; PyLint
# not only requires the linting dependency group, but also the testing and the docs dependency groups to be installed, because PyLint will try to
# import the packages in the modules its it linting, and the unit tests use the PyTest package and the Sphinx configuration uses the PybTeX and the
# Sphinx packages
[testenv:pylint]
base_python = py313
dependency_groups =
    testing
    linting
    docs
commands =
    pylint \
        --rcfile="tests/linters/.pylintrc" \
        --output-format="parseable" \
        zennit
#         "tests/unit" \
#         "docs/source/conf.py"

# A test environment that will run the PyCodeStyle linter on the REST API backend, the unit tests, the setup script, and the Sphinx configuration file
[testenv:pycodestyle]
base_python = py313
dependency_groups = linting
commands =
    pycodestyle \
        --config="tests/linters/.pycodestyle" \
        zennit \
        "tests/unit" \
        "docs/source/conf.py" \
        "docs/examples"

# A test environment that will run the PyDocLint docstring linter on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:pydoclint]
base_python = py313
dependency_groups = linting
commands =
    pydoclint \
        --config="tests/linters/.pydoclint.toml" \
        src/zennit
#         "tests/unit" \
#         "docs/source/conf.py"

# A test environment that will run the MyPy static type checker on the REST API backend, the unit tests, the setup script, and the Sphinx
# configuration file
[testenv:mypy]
base_python = py313
dependency_groups = linting
commands =
    mypy \
        --config-file="tests/linters/.mypy.ini" \
        zennit \
        "tests/unit" \
        "docs/source/conf.py" \
        "docs/examples"
