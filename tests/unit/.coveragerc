
# The general configuration for the PyTest coverage plugin
[run]

# Specifies that branch coverage should be measured
branch = true

# Causes the PyTest coverage plugin to append the machine name, process ID, and a random number to the data file name to simplify collecting data from
# many processes; this is done because we are running the unit tests using multiple Python versions
parallel = true

# The version.py file is generated by the build system, therefore, it is omitted from the coverage measurement and reporting
omit=*/zennit/version.py


# The configuration for the PyTest coverage plugin when generating the coverage report
[report]

# Specifies that files that have 100% coverage should be omitted from the report, so that we can focus on the files that need more testing
skip_covered = true

# Specifies that the report should include a list of the lines that were not covered by the unit tests
show_missing = true

# Excludes lines that raise a NotImplementedError from the coverage report; which we use in abstract methods
exclude_also = raise NotImplementedError


# Since the coverage data can be collected from multiple different installations of CoRelAy, the Coverage tool needs to know which files are
# equivalent; this configuration section contains named lists (in our case only a single list called "source"), where two file paths are considered
# equivalent and combined when running the "coverage combine" command when they are in the same list; here we specify that the files in directories
# called */source/zennit and */.tox/*/lib/python*/site-packages/zennit are equivalent
[paths]
source = */source/zennit,*/.tox/*/lib/python*/site-packages/zennit
