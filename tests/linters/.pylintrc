
# Configures general settings for Pylint
[MAIN]

# Ignores the version file, which is automatically generated by the build system and not checked into the version control system
ignore=version.py


# Configures design-related rules for the Pylint static code analysis tool; these rules help enforce certain design principles and constraints in the
# codebase, such maximum and minimum numbers of method/function arguments, class attributes, and class methods
[DESIGN]

# Maximum number of arguments for a function/method
max-args=12

# Maximum number of branch for function/method body
max-branches=24

# Maximum number of locals for a function/method body
max-locals=40

# Maximum number of positional arguments for a function/method
max-positional-arguments=12

# Maximum number of public methods for a class (see R0904)
max-public-methods=30

# Maximum number of return/yield statements in a function/method body
max-returns=10

# Maximum number of statements in a function/method body
max-statements=75

# Minimum number of public methods for a class (see R0903)
min-public-methods=0


# Configures format-related rules for the Pylint static code analysis tool; these rules help enforce certain formatting conventions in the codebase,
# such as the maximum number of characters on a single line and the maximum number of lines in a module
[FORMAT]

# Maximum number of characters on a single line
max-line-length=120


# Configures which messages are enabled or disabled in the Pylint static code analysis tool
[MESSAGES CONTROL]

# Disable the message, report, category or checker with the given ID(s)
disable=raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-implicit-booleaness-not-comparison-to-string,
        use-implicit-booleaness-not-comparison-to-zero,
        redefined-outer-name,
        abstract-method,
        redefined-builtin,
        arguments-differ,
        no-value-for-parameter,
        unused-argument,
        bad-staticmethod-argument,
        not-callable,
        unnecessary-dunder-call,
        use-symbolic-message-instead,
        unnecessary-lambda-assignment                     # Sometimes it is useful to assign a lambda expression to a variable, instead of declaring a
                                                          # function using the "def" keyword, especially in the unit tests
